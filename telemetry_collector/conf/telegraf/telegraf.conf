
[agent]
logtarget = "file"
logfile = "/var/log/telegraf/telegraf.log"
debug = true
hostname = "telegraf"
interval = "10s"
round_interval = false
metric_batch_size = 1000
metric_buffer_limit = 10000

# gNMI telemetry input plugin
[[inputs.gnmi]]
 ## Address and port of the gNMI GRPC server
 addresses = ["172.22.225.21:50051"]
 ## define credentials
 username = "$DOCKER_TELEGRAF_NET_USERNAME"
 password = "$DOCKER_TELEGRAF_NET_PASSWORD"
 ## gNMI encoding requested (one of: "proto", "json", "json_ietf", "bytes")
 encoding = "proto"
 ## redial in case of failures after
 redial = "10s"
 ## enable client-side TLS and define CA to authenticate the device
 enable_tls = true
 tls_ca = "/etc/telegraf/gnmi.pem"
 insecure_skip_verify = true

 [inputs.gnmi.aliases]
   bgp_session_state = "openconfig:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state"

 [[inputs.gnmi.subscription]]
    ## Name of the measurement that will be emitted
    name = "bgp_neighbor_state"
    ## origin usually refers to a (YANG) data model implemented by the device
    ## and path to a specific substructure inside it that should be subscribed to (similar to an XPath)
    ## YANG models can be found e.g. here: https://github.com/YangModels/yang/tree/master/vendor/cisco/nx
    origin = "openconfig-network-instance"
    path = "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state"
    # Subscription mode (one of: "target_defined", "sample", "on_change") and interval
    subscription_mode = "on_change"
    # sample_interval = "10s"

  [[inputs.gnmi.subscription]]
    ## Name of the measurement that will be emitted
    name = "route_count"
    # origin = "openconfig-network-instance"
    # path = "/network-instances/network-instance/protocols/protocol/bgp/global/state/total-prefixes" # works with sample
    origin = "device"
    # path = "/System/bgp-items/inst-items/dom-items/Dom-list/af-items/DomAf-list/numRoutes" # works with sample
    path = "/System/urib-items/table4-items/Table4-list/routeCount" # Shows total routes in each vrf supports on_change
    subscription_mode = "on_change"
    # sample_interval = "10s"


# [[outputs.file]]
# ## Files to write to, "stdout" is a specially handled file.
#   files = ["/tmp/metrics.out"]
#   rotation_max_archives = 3
#   rotation_max_size = "100MB"
#   data_format = "json"

# Output to Kafka Broker
[[outputs.kafka]]
  # URLs of kafka brokers
  brokers = ["broker:29092"]
  topic = "eda"
  data_format = "json"
